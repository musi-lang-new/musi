{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Musi",
    "scopeName": "source.musi",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#constants" },
        { "include": "#attributes" },
        { "include": "#declarations" },
        { "include": "#identifiers" }
    ],
    "repository": {
        "attributes": {
            "name": "meta.attribute.musi",
            "match": "@[a-zA-Z_][a-zA-Z0-9_]*(?:\\(([^)]*?)\\))?",
            "captures": {
                "0": { "name": "storage.type.class.msdoc" },
                "1": {
                    "patterns": [
                        {
                            "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:=\\s*(['\"][^'\"]*['\"]|[a-zA-Z0-9_]+)",
                            "captures": {
                                "1": { "name": "variable.parameter.musi" },
                                "2": { "name": "string.quoted.double.musi" }
                            }
                        },
                        {
                            "match": "['\"][^'\"]*['\"]",
                            "name": "string.quoted.double.musi"
                        },
                        {
                            "match": "[0-9]+",
                            "name": "constant.numeric.decimal.musi"
                        },
                        {
                            "match": "[a-zA-Z_][a-zA-Z0-9_]*",
                            "name": "variable.other.musi"
                        }
                    ]
                }
            }
        },
        "declarations": {
            "patterns": [
                {
                    "name": "meta.import-export.musi",
                    "begin": "\\b(import|export)\\b\\s*(?:{|from\\b|\\*)",
                    "beginCaptures": { "1": { "name": "keyword.control.import-export.musi" } },
                    "end": "(?=;)",
                    "patterns": [
                        {
                            "match": "\\b(as|from)\\b",
                            "name": "keyword.control.as.musi"
                        },
                        {
                            "match": "\\*",
                            "name": "constant.language.import-export-all.musi"
                        },
                        {
                            "begin": "{",
                            "end": "}",
                            "patterns": [
                                { "include": "#identifiers" },
                                { "include": "#punctuation" }
                            ]
                        },
                        {
                            "match": "[\"][^\"]*[\"]",
                            "name": "string.quoted.double.musi"
                        },
                        { "include": "$self" }
                    ]
                },
                {
                    "name": "meta.declaration.musi",
                    "begin": "((?:(?:export)extern|unsafe|async)\\s+)*\\b(alias|choice|func|record|trait)\\b",
                    "beginCaptures": {
                        "1": { "patterns": [ { "include": "#keywords" } ] },
                        "2": { "name": "storage.type.definition.musi" }
                    },
                    "end": "(?<=\\})|(?=;)",
                    "patterns": [ { "include": "$self" } ]
                },
                {
                    "name": "meta.choice.case.musi",
                    "match": "\\b(case)\\s+([A-Z][a-zA-Z0-9_]*)",
                    "captures": {
                        "1": { "name": "keyword.control.case.musi" },
                        "2": { "name": "variable.other.enummember.musi" }
                    }
                },
                {
                    "name": "meta.control.block.musi",
                    "begin": "\\b(if|for|while)\\b",
                    "beginCaptures": { "1": { "name": "keyword.control.musi" } },
                    "end": "(?<=\\})",
                    "patterns": [
                        {
                            "match": "\\b(in)\\b",
                            "name": "keyword.control.in.musi"
                        },
                        { "include": "$self" }
                    ]
                },
                {
                    "name": "meta.generic.musi",
                    "begin": "(?<=[a-zA-Z0-9_])(<)",
                    "end": "(>)",
                    "beginCaptures": { "1": { "name": "punctuation.brackets.generic.begin.musi" } },
                    "endCaptures": { "1": { "name": "punctuation.brackets.generic.end.musi" } },
                    "patterns": [ { "include": "$self" } ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.shebang.musi",
                    "match": "^(#!).*$\\n?"
                },
                {
                    "name": "comment.line.documentation.musi",
                    "begin": "(///\\s*)(@[a-zA-Z_]+)\\s*(\\{)",
                    "end": "(\\})(?:\\s+(?:(\\[)([a-zA-Z_][a-zA-Z0-9_]*)(:=)([^\\]]*)(\\])|([a-zA-Z_][a-zA-Z0-9_]*)))?|$",
                    "beginCaptures": {
                        "1": { "name": "comment.line.triple-slash.musi" },
                        "2": { "name": "storage.type.class.jsdoc" },
                        "3": { "name": "punctuation.definition.bracket.curly.begin.musi" }
                    },
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.bracket.curly.end.musi" },
                        "2": { "name": "punctuation.definition.bracket.square.begin.musi" },
                        "3": { "name": "variable.parameter.musi" },
                        "4": { "name": "keyword.operator.declaration.musi" },
                        "5": { "name": "constant.language.musi" },
                        "6": { "name": "punctuation.definition.bracket.square.end.musi" },
                        "7": { "name": "variable.parameter.musi" }
                    },
                    "patterns": [
                        {
                            "match": "([A-Z][a-zA-Z0-9_]*)",
                            "name": "entity.name.type.musi"
                        },
                        {
                            "match": "(<|>|,|\\||\\[|\\])",
                            "name": "punctuation.definition.typeparameters.musi"
                        },
                        {
                            "match": "([?!])",
                            "name": "keyword.operator.optional-fallible.musi"
                        }
                    ]
                },
                {
                    "name": "comment.line.documentation.musi",
                    "match": "(///\\s*)(@[a-zA-Z_]+)\\s+(?:(\\[)([a-zA-Z_][a-zA-Z0-9_]*)(=)([^\\]]*)(\\])|([a-zA-Z_][a-zA-Z0-9_]*))",
                    "captures": {
                        "1": { "name": "comment.line.triple-slash.musi" },
                        "2": { "name": "storage.type.class.jsdoc" },
                        "3": { "name": "punctuation.definition.bracket.square.begin.musi" },
                        "4": { "name": "variable.parameter.musi" },
                        "5": { "name": "keyword.operator.assignment.musi" },
                        "6": { "name": "constant.language.musi" },
                        "7": { "name": "punctuation.definition.bracket.square.end.musi" },
                        "8": { "name": "variable.parameter.musi" }
                    }
                },
                {
                    "name": "comment.line.documentation.musi",
                    "match": "(///\\s*)(@[a-zA-Z_]+)",
                    "captures": {
                        "1": { "name": "comment.line.triple-slash.musi" },
                        "2": { "name": "storage.type.class.jsdoc" }
                    }
                },
                {
                    "name": "comment.line.documentation.musi",
                    "match": "///.*"
                },
                {
                    "name": "comment.line.double-slash.musi",
                    "match": "//.*"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.musi",
                    "match": "\\b0[xX][0-9a-fA-F_]+(?:_?[inbd]\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.binary.musi",
                    "match": "\\b0[bB][01_]+(?:_?[inbd]\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.octal.musi",
                    "match": "\\b0[oO][0-7_]+(?:_?[inbd]\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.float.musi",
                    "match": "\\b\\d[\\d_]*(?:\\.\\d[\\d_]*)?[eE][+-]?\\d[\\d_]*(?:_?[bd]\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.decimal.musi",
                    "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*(?:_?[bd]\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.musi",
                    "match": "\\b\\d[\\d_]*(?:_?[in]\\d+)?\\b"
                },
                {
                    "name": "constant.language.boolean.musi",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.self.musi",
                    "match": "\\b[sS]elf\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.other.enummember.musi",
                    "match": "(\\.)([A-Z][a-zA-Z0-9_]*)\\b"
                },
                {
                    "name": "variable.other.constant.musi",
                    "match": "\\b(?:const\\s+)?[A-Z][A-Z0-9_]*[A-Z][A-Z0-9_]*\\b"
                },
                {
                    "name": "entity.name.function.call.musi",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*|[a-z_][a-zA-Z0-9_]*)(?=\\s*(?:<(?:[^<>]|<[^<>]*>)*>)?\\()"
                },
                {
                    "name": "entity.name.type.musi",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.property.musi",
                    "match": "(?<=\\.)([a-zA-Z_][a-zA-Z0-9_]*|\\d+)"
                },
                {
                    "name": "variable.other.musi",
                    "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.musi",
                    "match": "\\b(await|break|case|continue|defer|else|export|for|from|if|in|import|match|return|then|try|where|while)\\b"
                },
                {
                    "name": "storage.type.musi",
                    "match": "\\b(alias|choice|const|func|record|trait|var)\\b"
                },
                {
                    "name": "storage.modifier.musi",
                    "match": "\\b(async|extern|unsafe|weak)\\b"
                },
                {
                    "name": "keyword.operator.cast.musi",
                    "match": "\\b(as|is)\\b"
                }
            ]
        },
        "operators": {
            "name": "keyword.operator.musi",
            "match": ":|<-|->|\\.\\.\\.|\\.\\.<|=|=/=|<|<=|>|>=|[+\\-*/^]|\\?|!|\\b(and|mod|nand|not|nor|or|shl|shr|xor|xnor)\\b"
        },
        "punctuation": {
            "name": "punctuation.musi",
            "match": "[\\[\\]{}():;,.]"
        },
        "strings": {
            "patterns": [
                { "include": "#template-strings" },
                {
                    "name": "string.quoted.single.musi",
                    "begin": "'",
                    "end": "'",
                    "patterns": [ { "include": "#escape-sequences" } ]
                },
                {
                    "name": "string.quoted.double.musi",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [ { "include": "#escape-sequences" } ]
                }
            ]
        },
        "template-strings": {
            "name": "string.quoted.template.musi",
            "begin": "`",
            "end": "`",
            "patterns": [
                {
                    "name": "meta.template.expression.musi",
                    "begin": "(?<!\\\\)\\$\\{",
                    "end": "\\}",
                    "beginCaptures": { "0": { "name": "punctuation.definition.template-expression.begin.musi" } },
                    "endCaptures": { "0": { "name": "punctuation.definition.template-expression.end.musi" } },
                    "patterns": [ { "include": "$self" } ]
                },
                { "include": "#escape-sequences" }
            ]
        },
        "escape-sequences": {
            "name": "constant.character.escape.musi",
            "match": "\\\\([\"'`\\\\nrtbfv$]|u\\{[0-9a-fA-F]+\\}|x[0-9a-fA-F]{2})"
        }
    }
}
